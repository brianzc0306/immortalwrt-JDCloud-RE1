#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: immortalwrt-nikki

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/VIKINGYFY/immortalwrt.git
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: homeproxy.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  CCACHE_DIR: /workdir/ccache
  CCACHE_MAXSIZE: 2G

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Cache dependencies
      uses: actions/cache@main
      with:
        path: |
          /workdir/ccache
          immortalwrt/dl
        key: ${{ runner.os }}-${{ hashFiles('$FEEDS_CONF', '$CONFIG_FILE') }}

    - name: Setup environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install --no-install-recommends \
          ack antlr3 asciidoc autoconf automake binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex \
          gawk gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged \
          libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
          libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev \
          libtool llvm lrzsz mkisofs ninja-build p7zip p7zip-full patch pkgconf \
          python3 python3-pip python3-ply qemu-utils rsync scons squashfs-tools \
          subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir && sudo chown $USER: /workdir

    - name: Clone source
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sfn /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Apply custom configurations
      run: |
        [ -e "$FEEDS_CONF" ] && cp -f $FEEDS_CONF openwrt/feeds.conf.default
        [ -e "files" ] && cp -rf files openwrt/
        [ -e "$CONFIG_FILE" ] && cp -f $CONFIG_FILE openwrt/.config

        chmod +x {$DIY_P1_SH,$DIY_P2_SH}
        (cd openwrt && $GITHUB_WORKSPACE/$DIY_P1_SH)
        (cd openwrt && $GITHUB_WORKSPACE/$DIY_P2_SH)

    - name: Update feeds
      working-directory: openwrt
      run: ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: Download packages
      working-directory: openwrt
      run: |
        make defconfig
        make -j$(nproc) download
        find dl -size -1024c -delete

    - name: Build firmware
      working-directory: openwrt
      run: |
        echo "Using $(nproc) threads for compilation"
        make -j$(($(nproc) + 1)) || { echo "Parallel build failed, retrying with single thread"; make -j1; }
        echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -rn 's/.*DEVICE_(.*)=y/\1/p')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Prepare artifacts
      if: success() && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE_DIR=$(pwd)" >> $GITHUB_ENV

    - name: Upload artifacts
      if: env.UPLOAD_FIRMWARE == 'true' && success() && !cancelled()
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt-Firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_DIR }}/*

    - name: Create release
      if: env.UPLOAD_RELEASE == 'true' && success() && !cancelled()
      uses: softprops/action-gh-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: $(date +"%Y.%m.%d-%H%M")
        files: ${{ env.FIRMWARE_DIR }}/*

    - name: Cleanup
      if: always()
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 3
        keep_minimum_runs: 2

    - name: Prune releases
      if: env.UPLOAD_RELEASE == 'true' && success() && !cancelled()
      uses: dev-drprasad/delete-older-releases@master
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
